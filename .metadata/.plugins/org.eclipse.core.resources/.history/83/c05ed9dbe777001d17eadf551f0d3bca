import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Server {
	public static void main(String args[]) {
		new Server();
	}
	final static String DATE_FORMAT = "dd/MM/yyyy";

	public static boolean isDateValid(String date) 
	{
	        try {
	            DateFormat df = new SimpleDateFormat(DATE_FORMAT);	//s1mple format
	            df.setLenient(false);						
	            df.parse(date);			
	            return true;
	        } catch (ParseException e) {
	            return false;
	        }
	}
	
	public Server() {
		try {
			DatagramSocket tt= new DatagramSocket(5000);
			while(true) {
				DatagramPacket lt= new DatagramPacket(new byte[100], 100);
				tt.receive(lt);
				String content= new String(lt.getData()).substring(0, lt.getLength());
				
				
				if (isDateValid(content)) {
					 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("d/M/yyyy"); //dinh dang format
					 LocalDate ldate7= LocalDate.parse(content, dtf).plusDays(7);	//string to localdate + 7 theo dtf
				    		
				    content = "Date of next 7 days : " + ldate7.format(DateTimeFormatter.ofPattern(DATE_FORMAT)); //yyyy/MM/dd -> dd/MM/yyyy 
				}
				else {
					content = "Date of now : " + LocalDate.now().format(DateTimeFormatter.ofPattern(DATE_FORMAT)); //ldate with format
				}
				System.out.println(content);
				//lt= new DatagramPacket(content.getBytes(), content.length(), lt.getAddress(), lt.getPort());
				//tt.send(lt);
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
